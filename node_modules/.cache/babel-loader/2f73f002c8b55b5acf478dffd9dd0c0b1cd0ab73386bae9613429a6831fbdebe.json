{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acosta_iteggo\\\\graphql-checkbox-builder\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { buildSchema, isObjectType, isScalarType, isEnumType, isNonNullType, isListType } from 'graphql';\nimport React, { useState, useMemo } from 'react';\n\n// Helper para \"desenvolver\" tipos no null o listas y obtener el tipo base\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction unwrapType(type) {\n  if (isNonNullType(type) || isListType(type)) {\n    return unwrapType(type.ofType);\n  }\n  return type;\n}\n\n// Componente recursivo para renderizar los campos con checkboxes\nfunction FieldSelector({\n  schema,\n  type,\n  path,\n  selectedFields,\n  setSelectedFields\n}) {\n  if (!isObjectType(type)) return null;\n  const fields = type.getFields();\n  const toggleField = fieldName => {\n    const fullPath = [...path, fieldName].join('.');\n    setSelectedFields(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(fullPath)) {\n        // Si ya estaba seleccionado y se desmarca, quitarlo y todos los descendientes\n        for (const selected of newSet) {\n          if (selected === fullPath || selected.startsWith(fullPath + '.')) {\n            newSet.delete(selected);\n          }\n        }\n      } else {\n        // Si se marca, simplemente añadirlo\n        newSet.add(fullPath);\n      }\n      return newSet;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    style: {\n      listStyle: 'none',\n      paddingLeft: '1em',\n      borderLeft: '1px solid #ccc'\n    },\n    children: Object.values(fields).map(field => {\n      const fieldType = unwrapType(field.type);\n      const fullPath = [...path, field.name].join('.');\n      const isSelected = selectedFields.has(fullPath);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isSelected,\n            onChange: () => toggleField(field.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), field.name, \" (\", fieldType.name || fieldType.toString(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), isSelected && isObjectType(fieldType) && /*#__PURE__*/_jsxDEV(FieldSelector, {\n          schema: schema,\n          type: fieldType,\n          path: [...path, field.name],\n          selectedFields: selectedFields,\n          setSelectedFields: setSelectedFields\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)]\n      }, fullPath, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n// Generar query a partir de selecciónfunction\n_c = FieldSelector;\nfunction buildFieldTree(paths) {\n  const tree = {};\n  paths.forEach(path => {\n    const parts = path.split('.');\n    let current = tree;\n    for (const part of parts) {\n      if (!current[part]) {\n        current[part] = {};\n      }\n      current = current[part];\n    }\n  });\n  return tree;\n}\nfunction renderFieldTree(tree, type, schema, indent = '  ') {\n  if (!isObjectType(type)) return '';\n  const fields = type.getFields();\n  return Object.entries(tree).map(([fieldName, subTree]) => {\n    const field = fields[fieldName];\n    if (!field) return '';\n    const fieldType = unwrapType(field.type);\n    if (Object.keys(subTree).length > 0 && isObjectType(fieldType)) {\n      return `${indent}${fieldName} {\\n${renderFieldTree(subTree, fieldType, schema, indent + '  ')}\\n${indent}}`;\n    } else {\n      return `${indent}${fieldName}`;\n    }\n  }).join('\\n');\n}\nfunction generateQuery(schema, selectedFields) {\n  const queryType = schema.getQueryType();\n  if (!queryType) return '';\n  const fieldTree = buildFieldTree([...selectedFields]);\n  const body = renderFieldTree(fieldTree, queryType, schema);\n  return `query {\\n${body}\\n}`;\n}\nexport default function GraphQLCheckboxBuilder() {\n  _s();\n  const [selectedFields, setSelectedFields] = useState(new Set());\n  const [copySuccess, setCopySuccess] = useState('');\n  const schema = useMemo(() => buildSchema(schemaSDL), []);\n  const handleCopy = () => {\n    const query = generateQuery(schema, selectedFields);\n    navigator.clipboard.writeText(query).then(() => {\n      setCopySuccess('¡Query copiada al portapapeles!');\n      setTimeout(() => setCopySuccess(''), 1500);\n    }).catch(() => {\n      setCopySuccess('Error al copiar');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'monospace',\n      fontSize: 14,\n      maxWidth: 700,\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Selecciona campos para tu Query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FieldSelector, {\n      schema: schema,\n      type: schema.getQueryType(),\n      path: [],\n      selectedFields: selectedFields,\n      setSelectedFields: setSelectedFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Query generada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: generateQuery(schema, selectedFields)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCopy,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Copiar query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), copySuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: copySuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphQLCheckboxBuilder, \"my/29Zw4Rjlg/Jt7KJGMG4j4L+A=\");\n_c2 = GraphQLCheckboxBuilder;\nvar _c, _c2;\n$RefreshReg$(_c, \"FieldSelector\");\n$RefreshReg$(_c2, \"GraphQLCheckboxBuilder\");","map":{"version":3,"names":["buildSchema","isObjectType","isScalarType","isEnumType","isNonNullType","isListType","React","useState","useMemo","jsxDEV","_jsxDEV","unwrapType","type","ofType","FieldSelector","schema","path","selectedFields","setSelectedFields","fields","getFields","toggleField","fieldName","fullPath","join","prev","newSet","Set","has","selected","startsWith","delete","add","style","listStyle","paddingLeft","borderLeft","children","Object","values","map","field","fieldType","name","isSelected","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","toString","_c","buildFieldTree","paths","tree","forEach","parts","split","current","part","renderFieldTree","indent","entries","subTree","keys","length","generateQuery","queryType","getQueryType","fieldTree","body","GraphQLCheckboxBuilder","_s","copySuccess","setCopySuccess","schemaSDL","handleCopy","query","navigator","clipboard","writeText","then","setTimeout","catch","fontFamily","fontSize","maxWidth","margin","onClick","marginTop","color","_c2","$RefreshReg$"],"sources":["C:/Users/acosta_iteggo/graphql-checkbox-builder/src/App.js"],"sourcesContent":["import { buildSchema, isObjectType, isScalarType, isEnumType, isNonNullType, isListType } from 'graphql';\nimport React, { useState, useMemo } from 'react';\n\n// Helper para \"desenvolver\" tipos no null o listas y obtener el tipo base\nfunction unwrapType(type) {\n  if (isNonNullType(type) || isListType(type)) {\n    return unwrapType(type.ofType);\n  }\n  return type;\n}\n\n// Componente recursivo para renderizar los campos con checkboxes\nfunction FieldSelector({ schema, type, path, selectedFields, setSelectedFields }) {\n  if (!isObjectType(type)) return null;\n\n  const fields = type.getFields();\n\n  const toggleField = (fieldName) => {\n  const fullPath = [...path, fieldName].join('.');\n  setSelectedFields((prev) => {\n    const newSet = new Set(prev);\n    if (newSet.has(fullPath)) {\n      // Si ya estaba seleccionado y se desmarca, quitarlo y todos los descendientes\n      for (const selected of newSet) {\n        if (selected === fullPath || selected.startsWith(fullPath + '.')) {\n          newSet.delete(selected);\n        }\n      }\n    } else {\n      // Si se marca, simplemente añadirlo\n      newSet.add(fullPath);\n    }\n    return newSet;\n  });\n};\n\n\n  return (\n    <ul style={{ listStyle: 'none', paddingLeft: '1em', borderLeft: '1px solid #ccc' }}>\n      {Object.values(fields).map((field) => {\n        const fieldType = unwrapType(field.type);\n        const fullPath = [...path, field.name].join('.');\n        const isSelected = selectedFields.has(fullPath);\n\n        return (\n          <li key={fullPath}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={() => toggleField(field.name)}\n              />\n              {field.name} ({fieldType.name || fieldType.toString()})\n            </label>\n            {/* Renderizar subcampos si es objeto y seleccionado */}\n            {isSelected && isObjectType(fieldType) && (\n              <FieldSelector\n                schema={schema}\n                type={fieldType}\n                path={[...path, field.name]}\n                selectedFields={selectedFields}\n                setSelectedFields={setSelectedFields}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\n// Generar query a partir de selecciónfunction\nfunction buildFieldTree(paths) {\n  const tree = {};\n  paths.forEach((path) => {\n    const parts = path.split('.');\n    let current = tree;\n    for (const part of parts) {\n      if (!current[part]) {\n        current[part] = {};\n      }\n      current = current[part];\n    }\n  });\n  return tree;\n}\n\nfunction renderFieldTree(tree, type, schema, indent = '  ') {\n  if (!isObjectType(type)) return '';\n\n  const fields = type.getFields();\n  return Object.entries(tree)\n    .map(([fieldName, subTree]) => {\n      const field = fields[fieldName];\n      if (!field) return '';\n      const fieldType = unwrapType(field.type);\n      if (Object.keys(subTree).length > 0 && isObjectType(fieldType)) {\n        return `${indent}${fieldName} {\\n${renderFieldTree(subTree, fieldType, schema, indent + '  ')}\\n${indent}}`;\n      } else {\n        return `${indent}${fieldName}`;\n      }\n    })\n    .join('\\n');\n}\n\nfunction generateQuery(schema, selectedFields) {\n  const queryType = schema.getQueryType();\n  if (!queryType) return '';\n\n  const fieldTree = buildFieldTree([...selectedFields]);\n  const body = renderFieldTree(fieldTree, queryType, schema);\n  return `query {\\n${body}\\n}`;\n}\n\n\nexport default function GraphQLCheckboxBuilder() {\n  const [selectedFields, setSelectedFields] = useState(new Set());\n  const [copySuccess, setCopySuccess] = useState('');\n  const schema = useMemo(() => buildSchema(schemaSDL), []);\n\n  const handleCopy = () => {\n    const query = generateQuery(schema, selectedFields);\n    navigator.clipboard.writeText(query)\n      .then(() => {\n        setCopySuccess('¡Query copiada al portapapeles!');\n        setTimeout(() => setCopySuccess(''), 1500);\n      })\n      .catch(() => {\n        setCopySuccess('Error al copiar');\n      });\n  };\n\n  return (\n    <div style={{ fontFamily: 'monospace', fontSize: 14, maxWidth: 700, margin: 'auto' }}>\n      <h3>Selecciona campos para tu Query</h3>\n      <FieldSelector\n        schema={schema}\n        type={schema.getQueryType()}\n        path={[]}\n        selectedFields={selectedFields}\n        setSelectedFields={setSelectedFields}\n      />\n      <h3>Query generada</h3>\n      <pre>{generateQuery(schema, selectedFields)}</pre>\n      <button onClick={handleCopy} style={{ marginTop: '10px' }}>\n        Copiar query\n      </button>\n      {copySuccess && <div style={{ color: 'green' }}>{copySuccess}</div>}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}