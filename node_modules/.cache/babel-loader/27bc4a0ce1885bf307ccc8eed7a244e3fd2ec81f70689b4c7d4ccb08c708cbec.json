{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acosta_iteggo\\\\graphql-checkbox-builder\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { buildSchema, isObjectType, isScalarType, isEnumType, isNonNullType, isListType } from 'graphql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schemaSDL = `\n  type Query {\n    crPartyReferenceDataDirectoryEntry(partyReferenceDataDirectoryId: String!): CrPartyReferenceDataDirectoryEntry!\n    bqDemographics(partyReferenceDataDirectoryId: String): BQDemographic\n    bqReference(partyReferenceDataDirectoryId: String): BQReference\n    bqAssociations(partyReferenceDataDirectoryId: String, associationId: String): [BQAssociation]\n  }\n  \n  type CrPartyReferenceDataDirectoryEntry {\n    partyReference: Party\n    partyType: PartyTypeValues\n    directoryEntryDateType: DirectoryEntryDateTypeValues\n    directoryEntryDate: DateTime\n  }\n  \n  type Party {\n    partyId: String\n    partyIdentification: PartyIdentification\n    partyIdentificationExtension: String\n    partyNames: [PartyName]\n    partyType: PartyTypeValues\n  }\n  \n  type PartyIdentification {\n    partyIdentificationType: PartyIdentificationTypeValues\n    partyIdentification: Identifier\n  }\n  \n  type Identifier {\n    identifierValue: String\n  }\n  \n  scalar DateTime\n  \n  enum PartyTypeValues {\n    Persona\n    Empresa\n  }\n  \n  enum DirectoryEntryDateTypeValues {\n    FechaCreacion\n    FechaModificacion\n  }\n`;\n\n// Helper para \"desenvolver\" tipos no null o listas y obtener el tipo base\nfunction unwrapType(type) {\n  if (isNonNullType(type) || isListType(type)) {\n    return unwrapType(type.ofType);\n  }\n  return type;\n}\n\n// Componente recursivo para renderizar los campos con checkboxes\nfunction FieldSelector({\n  schema,\n  type,\n  path,\n  selectedFields,\n  setSelectedFields\n}) {\n  if (!isObjectType(type)) return null;\n  const fields = type.getFields();\n  const toggleField = fieldName => {\n    const fullPath = [...path, fieldName].join('.');\n    setSelectedFields(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(fullPath)) newSet.delete(fullPath);else newSet.add(fullPath);\n      return newSet;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    style: {\n      listStyle: 'none',\n      paddingLeft: '1em',\n      borderLeft: '1px solid #ccc'\n    },\n    children: Object.values(fields).map(field => {\n      const fieldType = unwrapType(field.type);\n      const fullPath = [...path, field.name].join('.');\n      const isSelected = selectedFields.has(fullPath);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isSelected,\n            onChange: () => toggleField(field.name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), field.name, \" (\", fieldType.name || fieldType.toString(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), isSelected && isObjectType(fieldType) && /*#__PURE__*/_jsxDEV(FieldSelector, {\n          schema: schema,\n          type: fieldType,\n          path: [...path, field.name],\n          selectedFields: selectedFields,\n          setSelectedFields: setSelectedFields\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this)]\n      }, fullPath, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// Generar query a partir de selecciÃ³n\n_c = FieldSelector;\nfunction generateQuery(schema, selectedFields) {\n  const queryType = schema.getQueryType();\n  if (!queryType) return '';\n  const fields = queryType.getFields();\n\n  // Agrupar campos seleccionados por primer nivel\n  const grouped = {};\n  selectedFields.forEach(fullPath => {\n    const parts = fullPath.split('.');\n    const first = parts[0];\n    const rest = parts.slice(1).join('.');\n    if (!grouped[first]) grouped[first] = [];\n    if (rest) grouped[first].push(rest);\n  });\n  function genFields(type, paths) {\n    if (!paths.length) return '';\n    const typeObj = schema.getType(type.name);\n    if (!isObjectType(typeObj)) return '';\n    const fields = typeObj.getFields();\n    return paths.map(p => {\n      if (!p) return null;\n      const parts = p.split('.');\n      const fieldName = parts[0];\n      const rest = parts.slice(1).join('.');\n      const field = fields[fieldName];\n      if (!field) return null;\n      const fieldType = unwrapType(field.type);\n      const subfields = rest ? [rest] : [];\n      if (isObjectType(fieldType)) {\n        return `${fieldName} {\\n${genFields(fieldType, subfields)}\\n}`;\n      } else {\n        return fieldName;\n      }\n    }).filter(Boolean).join('\\n');\n  }\n  const queryFields = Object.entries(grouped).map(([fieldName, subPaths]) => {\n    const field = fields[fieldName];\n    if (!field) return null;\n    const fieldType = unwrapType(field.type);\n    if (isObjectType(fieldType)) {\n      return `${fieldName} {\\n${genFields(fieldType, subPaths)}\\n}`;\n    } else {\n      return fieldName;\n    }\n  }).filter(Boolean).join('\\n');\n  return `query {\\n${queryFields}\\n}`;\n}\nexport default function GraphQLCheckboxBuilder() {\n  _s();\n  const [selectedFields, setSelectedFields] = useState(new Set());\n  const schema = React.useMemo(() => buildSchema(schemaSDL), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: 'monospace',\n      fontSize: 14,\n      maxWidth: 700,\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Selecciona campos para tu Query\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FieldSelector, {\n      schema: schema,\n      type: schema.getQueryType(),\n      path: [],\n      selectedFields: selectedFields,\n      setSelectedFields: setSelectedFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Query generada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: generateQuery(schema, selectedFields)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphQLCheckboxBuilder, \"XYGyGT/ZePxdSna90dkHbEYycko=\");\n_c2 = GraphQLCheckboxBuilder;\nvar _c, _c2;\n$RefreshReg$(_c, \"FieldSelector\");\n$RefreshReg$(_c2, \"GraphQLCheckboxBuilder\");","map":{"version":3,"names":["React","useState","buildSchema","isObjectType","isScalarType","isEnumType","isNonNullType","isListType","jsxDEV","_jsxDEV","schemaSDL","unwrapType","type","ofType","FieldSelector","schema","path","selectedFields","setSelectedFields","fields","getFields","toggleField","fieldName","fullPath","join","prev","newSet","Set","has","delete","add","style","listStyle","paddingLeft","borderLeft","children","Object","values","map","field","fieldType","name","isSelected","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","toString","_c","generateQuery","queryType","getQueryType","grouped","forEach","parts","split","first","rest","slice","push","genFields","paths","length","typeObj","getType","p","subfields","filter","Boolean","queryFields","entries","subPaths","GraphQLCheckboxBuilder","_s","useMemo","fontFamily","fontSize","maxWidth","margin","_c2","$RefreshReg$"],"sources":["C:/Users/acosta_iteggo/graphql-checkbox-builder/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { buildSchema, isObjectType, isScalarType, isEnumType, isNonNullType, isListType } from 'graphql';\n\nconst schemaSDL = `\n  type Query {\n    crPartyReferenceDataDirectoryEntry(partyReferenceDataDirectoryId: String!): CrPartyReferenceDataDirectoryEntry!\n    bqDemographics(partyReferenceDataDirectoryId: String): BQDemographic\n    bqReference(partyReferenceDataDirectoryId: String): BQReference\n    bqAssociations(partyReferenceDataDirectoryId: String, associationId: String): [BQAssociation]\n  }\n  \n  type CrPartyReferenceDataDirectoryEntry {\n    partyReference: Party\n    partyType: PartyTypeValues\n    directoryEntryDateType: DirectoryEntryDateTypeValues\n    directoryEntryDate: DateTime\n  }\n  \n  type Party {\n    partyId: String\n    partyIdentification: PartyIdentification\n    partyIdentificationExtension: String\n    partyNames: [PartyName]\n    partyType: PartyTypeValues\n  }\n  \n  type PartyIdentification {\n    partyIdentificationType: PartyIdentificationTypeValues\n    partyIdentification: Identifier\n  }\n  \n  type Identifier {\n    identifierValue: String\n  }\n  \n  scalar DateTime\n  \n  enum PartyTypeValues {\n    Persona\n    Empresa\n  }\n  \n  enum DirectoryEntryDateTypeValues {\n    FechaCreacion\n    FechaModificacion\n  }\n`;\n\n// Helper para \"desenvolver\" tipos no null o listas y obtener el tipo base\nfunction unwrapType(type) {\n  if (isNonNullType(type) || isListType(type)) {\n    return unwrapType(type.ofType);\n  }\n  return type;\n}\n\n// Componente recursivo para renderizar los campos con checkboxes\nfunction FieldSelector({ schema, type, path, selectedFields, setSelectedFields }) {\n  if (!isObjectType(type)) return null;\n\n  const fields = type.getFields();\n\n  const toggleField = (fieldName) => {\n    const fullPath = [...path, fieldName].join('.');\n    setSelectedFields((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(fullPath)) newSet.delete(fullPath);\n      else newSet.add(fullPath);\n      return newSet;\n    });\n  };\n\n  return (\n    <ul style={{ listStyle: 'none', paddingLeft: '1em', borderLeft: '1px solid #ccc' }}>\n      {Object.values(fields).map((field) => {\n        const fieldType = unwrapType(field.type);\n        const fullPath = [...path, field.name].join('.');\n        const isSelected = selectedFields.has(fullPath);\n\n        return (\n          <li key={fullPath}>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={() => toggleField(field.name)}\n              />\n              {field.name} ({fieldType.name || fieldType.toString()})\n            </label>\n            {/* Renderizar subcampos si es objeto y seleccionado */}\n            {isSelected && isObjectType(fieldType) && (\n              <FieldSelector\n                schema={schema}\n                type={fieldType}\n                path={[...path, field.name]}\n                selectedFields={selectedFields}\n                setSelectedFields={setSelectedFields}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\n// Generar query a partir de selecciÃ³n\nfunction generateQuery(schema, selectedFields) {\n  const queryType = schema.getQueryType();\n  if (!queryType) return '';\n\n  const fields = queryType.getFields();\n\n  // Agrupar campos seleccionados por primer nivel\n  const grouped = {};\n  selectedFields.forEach((fullPath) => {\n    const parts = fullPath.split('.');\n    const first = parts[0];\n    const rest = parts.slice(1).join('.');\n    if (!grouped[first]) grouped[first] = [];\n    if (rest) grouped[first].push(rest);\n  });\n\n  function genFields(type, paths) {\n    if (!paths.length) return '';\n    const typeObj = schema.getType(type.name);\n    if (!isObjectType(typeObj)) return '';\n\n    const fields = typeObj.getFields();\n\n    return paths\n      .map((p) => {\n        if (!p) return null;\n        const parts = p.split('.');\n        const fieldName = parts[0];\n        const rest = parts.slice(1).join('.');\n        const field = fields[fieldName];\n        if (!field) return null;\n        const fieldType = unwrapType(field.type);\n        const subfields = rest ? [rest] : [];\n        if (isObjectType(fieldType)) {\n          return `${fieldName} {\\n${genFields(fieldType, subfields)}\\n}`;\n        } else {\n          return fieldName;\n        }\n      })\n      .filter(Boolean)\n      .join('\\n');\n  }\n\n  const queryFields = Object.entries(grouped)\n    .map(([fieldName, subPaths]) => {\n      const field = fields[fieldName];\n      if (!field) return null;\n      const fieldType = unwrapType(field.type);\n      if (isObjectType(fieldType)) {\n        return `${fieldName} {\\n${genFields(fieldType, subPaths)}\\n}`;\n      } else {\n        return fieldName;\n      }\n    })\n    .filter(Boolean)\n    .join('\\n');\n\n  return `query {\\n${queryFields}\\n}`;\n}\n\nexport default function GraphQLCheckboxBuilder() {\n  const [selectedFields, setSelectedFields] = useState(new Set());\n\n  const schema = React.useMemo(() => buildSchema(schemaSDL), []);\n\n  return (\n    <div style={{ fontFamily: 'monospace', fontSize: 14, maxWidth: 700, margin: 'auto' }}>\n      <h3>Selecciona campos para tu Query</h3>\n      <FieldSelector\n        schema={schema}\n        type={schema.getQueryType()}\n        path={[]}\n        selectedFields={selectedFields}\n        setSelectedFields={setSelectedFields}\n      />\n      <h3>Query generada</h3>\n      <pre>{generateQuery(schema, selectedFields)}</pre>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}